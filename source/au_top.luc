module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output dout,
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
        counter slow_clock(#SIZE(1), #DIV(24));
        counter fast_clock(#SIZE(1), #DIV(8));
    }
    
    button_conditioner step;
  }
  
  sig clk2; 
  .clk(clk2) {
    dff sp[8](#INIT(hff)), pc[16], a[8], x[8], y[8], register[8], flags_store[6];
    dff t1[2], t2, oc[16];
    dff stack_loading[6], stack_loaded[6], oc_change, opcode_store[29];
  }
  
  .clk(clk2) {
    ram ram(#DEPTH(h10000), #SIZE(8));
  }
  
  .clk(clk) {
    .rst(rst) {
      segment_display fourdigits(#DIGITS(4));
    }
    
    led_matrix led_matrix;
  }
  
  const ROM = $reverse({
h4C, h03, h00, hA2, h00, hA9, h03, h95, h00, hE8, hA9, h0D, h95, h00, hE8, hA9, h0D, h95, h00, hE8, hA9, h0D, h95, h00, hE8, hA9, h0D, h95, h00, hE8, hA9, h0D, h95, h00, hE8, hA9, h0D, h95, h00, hA9, h14, h85, h07, hA9, h03, h85, h08, hA9, h00, h85, h09, hA2, h00, hE8, hE0, h01, hD0, hFB, hA2, h00, hA4, h07, h84, hFE, h24, hFE, h10, h0B, h16, h00, h08, h56, h00, h28, h36, h00, h4C, h57, h00, h56, h00, h08, h16, h00, h28, h76, h00, h06, hFE, hE8, hE0, h07, hD0, hE2, h20, h64, h00, h4C, h33, h00, h8A, h48, h98, h48, hA2, h00, hB5, h00, hE8, h85, hFD, hA0, h08, h88, h24, hFD, h10, h1C, hA9, h00, h8D, h05, h20, h8D, h03, h20, h8D, h02, h20, h8D, h04, h20, h8E, h01, h20, h8C, h00, h20, hA9, h01, h8D, h05, h20, h4C, hAD, h00, hA9, h00, h8D, h05, h20, h8D, h02, h20, h8D, h04, h20, hA9, h05, h8D, h03, h20, h8E, h01, h20, h8C, h00, h20, hA9, h01, h8D, h05, h20, h06, hFD, hC0, h00, hD0, hBE, hE0, h07, hD0, hB3, hA6, h08, hA4, h09, hA9, h00, h8D, h05, h20, h8E, h00, h20, h8C, h01, h20, hA9, h05, h8D, h02, h20, hA9, h01, h8D, h05, h20, h68, hA8, h68, hAA, h60
  });
  
  const OPCODES = $reverse({
b00000000010000100000000000001,b01111011000000000111000000101,b10010111100010000000001001101,b00000000000000000111000000000,b00000000000000000010000000001,b01111011000000000010000000101,b10010111100010000010001001101,b00000000000000000010000000001,b00010000000000010000000000000,b01111011000000000000000000101,b10010111100010000000000000100,b00000000000000000000000000000,b00000000000000000010000000010,b01111011000000000010000000110,b10010111100010000010001001110,b00000000000000000010000000010,b00000010000011000000000000001,b01111011000000001000100000101,b10010111100010001010101001101,b00000000000000001000100000001,b00000000000000000011000000001,b01111011000000000011000000101,b10010111100010000011001001101,b00000000000000000011000000001,b00000000100010100000000000000,b01111011000000000010100000110,b10010111100010000010101001110,b00000000000000000010100000010,b00000000000000000011000000010,b01111011000000000011000000110,b10010111100010000011001001110,b00000000000000000011000000010,b00001100000000010000001001110,b01100011000000000111000000101,b10010111100000000000001001101,b00000000000000000111000000000,b11000011000100000010001000001,b01100011000000000010000000101,b10010111100000000010001001101,b00000000000000000010000000001,b00010000000000010000000100000,b01100011000000000000000000101,b10010111100000000000000000100,b00000000000000000000000000000,b11000011000100000010001000010,b01100011000000000010000000110,b10010111100000000010001001110,b00000000000000000010000000010,b00000010000001000000000000001,b01100011000000001000100000101,b10010111100000001010101001101,b00000000000000001000100000001,b11000011000100000011001000001,b01100011000000000011000000101,b10010111100000000011001001101,b00000000000000000011000000001,b00000000100000100000000000000,b01100011000000000010100000110,b10010111100000000010101001110,b00000000000000000010100000010,b11000011000100000011001000010,b01100011000000000011000000110,b10010111100000000011001001110,b00000000000000000011000000010,b00011100010010110000000100000,b01011011000000000111000000101,b10010011100010000000001001101,b00000000000000000111000000000,b00000000000000010000001001101,b01011011000000000010000000101,b10010011100010000010001001101,b00000000000000000010000000001,b00100000000000010000000000000,b01011011000000000000000000101,b10010011100010000000000000100,b00000000000000000000000000000,b00000000000000010000001001110,b01011011000000000010000000110,b10010011100010000010001001110,b00000000000000000010000000010,b00000000000111000000000000001,b01011011000000001000100000101,b10010011100010001010101001101,b00000000000000001000100000001,b00000000000000010001001001101,b01011011000000000011000000101,b10010011100010000011001001101,b00000000000000000011000000001,b00000000010010100000000000000,b01011011000000000010100000110,b10010011100010000010101001110,b00000000000000000010100000010,b00000000000000010001001001110,b01011011000000000011000000110,b10010011100010000011001001110,b00000000000000000011000000010,b00001100000000010000000100000,b00000011100100000111000000101,b10010011100000000000001001101,b00000000000000000111000000000,b00000000000000010110001001101,b00000011100100000010000000101,b10010011100000000010001001101,b00000000000000000010000000001,b00100000000000010000000100000,b00000011100100000000000000101,b10010011100000000000000000100,b00000000000000000000000000000,b00000000000000010110001001110,b00000011100100000010000000110,b10010011100000000010001001110,b00000000000000000010000000010,b00000000000101000000000000001,b00000011100100001000100000101,b10010011100000001010101001101,b00000000000000001000100000001,b00000000000000010111001001101,b00000011100100000011000000101,b10010011100000000011001001101,b00000000000000000011000000001,b00000000010000100000000000000,b00000011100100000010100000110,b10010011100000000010101001110,b00000000000000000010100000010,b00000000000000010111001001110,b00000011100100000011000000110,b10010011100000000011001001110,b00000000000000000011000000010,b01101000000000000000011001101,b01101000000000000101000001101,b01101000000000000000010001101,b01101000000000000101000001000,b01101000000000000000011001101,b01101000000000000000000001101,b01101000000000000010010001101,b01101000000000000000000001001,b00000100000000000000011111100,b01101000000000000000000001101,b01101000000000000000010000100,b01101000000000000000000001000,b01101000000000000000011001110,b01101000000000000000000001110,b01101000000000000010010001110,b01101000000000000000000001010,b00000000100011000000000000001,b01101000000000001000100001101,b01101000000000001010110001101,b01101000000000001000100001001,b01101000000000000001011001101,b01101000000000000001000001101,b01101000000000000010110001101,b01101000000000000001000001001,b01101000000000000000011000100,b01101000000000000000100001110,b00000000000000010000010000100,b01101000000000000000100001010,b01101000000000000001011001110,b01101000000000000001000001110,b01101000000000000010110001110,b01101000000000000001000001010,b01101000000000000000001011101,b01101000000000000111001000101,b01101000000000000000001010101,b01101000000000000111001000000,b01101000000000000010001011101,b01101000000000000010001000101,b01101000000000000010001010101,b01101000000000000010001000001,b01101000000000000000000011100,b01101000000000000000001000101,b01101000000000000000000010100,b01101000000000000000001000000,b01101000000000000010001011110,b01101000000000000010001000110,b01101000000000000010001010110,b01101000000000000010001000010,b00000000100001000000000000001,b01101000000000001000101000101,b01101000000000001010101010101,b01101000000000001000101000001,b01101000000000000011001011101,b01101000000000000011001000101,b01101000000000000010101010101,b01101000000000000011001000001,b00000000000110100000000000000,b01101000000000000010101000110,b00000000000000010000000110100,b01101000000000000010101000010,b01101000000000000011001011110,b01101000000000000011001000110,b01101000000000000010101010110,b01101000000000000011001000010,b00000111100010000000011000001,b00000111100010000111000000001,b00000111100000000000001101101,b00000000000000000111000000000,b00000111100010000010011000001,b00000111100010000010000000001,b00000111100000000010001101101,b00000000000000000010000000001,b00000000000000000000011111100,b00000111100010000000000000001,b00000100000000000000010110100,b00000000000000000000000000000,b00000111100010000010011000010,b00000111100010000010000000010,b00000111100000000010001101110,b00000000000000000010000000010,b00000001000011000000000000001,b00000111100010001000100000001,b00000111100000001010101101101,b00000000000000001000100000001,b00000111100010000011011000001,b00000111100010000011000000001,b00000111100000000011001101101,b00000000000000000011000000001,b00000000001010100000000000000,b00000111100010000010100000010,b00000111100000000010101101110,b00000000000000000010100000010,b00000111100010000011011000010,b00000111100010000011000000010,b00000111100000000011001101110,b00000000000000000011000000010,b00000111100010000000010000001,b00000111100100000111000000101,b00000011100000000000001101101,b00000000000000000111000000000,b00000111100010000010010000001,b00000111100100000010000000101,b00000011100000000010001101101,b00000000000000000010000000001,b00000000000000000000010110100,b00000111100100000000000000101,b00000000000000000000000000000,b00000000000000000000000000000,b00000111100010000010010000010,b00000111100100000010000000110,b00000011100000000010001101110,b00000000000000000010000000010,b00000001000001000000000000001,b00000111100100001000100000101,b00000011100000001010101101101,b00000000000000001000100000001,b00000111100010000011010000001,b00000111100100000011000000101,b00000011100000000011001101101,b00000000000000000011000000001,b00000000001000100000000000000,b00000111100100000010100000110,b00000011100000000010101101110,b00000000000000000010100000010,b00000111100010000011010000010,b00000111100100000011000000110,b00000011100000000011001101110,b00000000000000000011000000010
 });
  
  sig opcode[29];
  sig rdata[8], mdata[16], maddr[16], data_ready, finish;
  sig alufn[6], flags[6], clear_flag, test_flag, set_flag, stack_mode, post_index, lookup, data, xsel, ysel, asel[2], bsel[1], wsel[2], we, l[2];
  sig buffer[16], noc[16];
  
  sig stack_in[16], stack_break, oc_changed;
  var i;
  
  alu alu(#BITS(8));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hf;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // Disable ram by default
    ram.address = 0;
    ram.write_en = 0;
    ram.write_data = 0;
    
    // ALU Defaults
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;
    alu.in_flags = 0;
    
    opcode = opcode_store.q;
    rdata  = ROM[oc.q];
    
    buffer = 0;
    data_ready = 0;
    if (t1.q == 0) {
      opcode = OPCODES[rdata];
      opcode_store.d = opcode;
      pc.d = oc.q;
      
      register.d = 0;
      t1.d = 1;
    }
    
    // START: opcode convience assignments
    l = opcode[1:0];
    we = opcode[2];
    wsel = opcode[4:3];
    bsel = opcode[5:5];
    asel = opcode[7:6];
    ysel = opcode[8];
    xsel = opcode[9];
    data = opcode[10];
    lookup = opcode[11];
    post_index = opcode[12];
    stack_mode = opcode[13];
    set_flag = opcode[14];
    test_flag = opcode[15];
    clear_flag = opcode[16];
    flags = opcode[22:17];
    alufn = opcode[28:23];
    // END: opcode convience assignments
    
    // add_force {/au_top_0/clk} -radix hex {1 0ns} {0 5000ps} -repeat_every 10000ps; add_force {/au_top_0/clk2} -radix hex {1 0ns} {0 5000ps} -repeat_every 10000ps
    
    noc = oc.q + 1;
    
    if (t1.q == b01) {
      buffer = rdata;
      register.d = buffer[7:0];
    } else if (t1.q == b10) {
      buffer = c{rdata, register.q};
    }
    mdata = 0;
    if (t1.q >= l) {
      maddr = buffer;
      if (lookup) {
        case (c{post_index, xsel, ysel}) {
          b001: maddr = c{ROM[buffer+y.q+1], ROM[buffer+y.q]};
          b010: maddr = c{ROM[buffer+x.q+1], ROM[buffer+x.q]};
          b101: maddr = c{ROM[buffer+1], ROM[buffer]} + y.q;
          b110: maddr = c{ROM[buffer+1], ROM[buffer]} + x.q;
          default: maddr = c{ROM[buffer+1], ROM[buffer]};
        }
      } else {
        if (xsel) {
          maddr = buffer + x.q;
        } else if (ysel)  {
          maddr = buffer + y.q;
        }
      }
      if (t2.q == 0) {
        if (data) {
          ram.address = maddr;
          t2.d = 1;
        } else {
          mdata = buffer; // Immediate
          if (lookup) { // Indirect
            mdata = c{ROM[buffer+1], ROM[buffer]};
          }
          data_ready = 1;
        }
      } else if (t2.q == 1) {
        mdata = ram.read_data;
        if (post_index) {
          if (xsel) {
            mdata = ram.read_data + x.q;
          } else if (ysel) {
            mdata = ram.read_data + y.q;
          }
        }
        data_ready = 1;
      }
      if (data_ready) {
        finish = 0;
        oc_changed = 0;
      
        if (stack_mode) {
          stack_in = 0;
          case (asel) {
            b00: stack_in = a.q;
            b01: stack_in = mdata;
            b10: stack_in = x.q;
            b11: stack_in = y.q;
          }
          if (bsel) {
            stack_in = sp.q;
          }
          
          stack_break = 0;
          if (bsel) { // stack pull
            for (i = 0; i < 4; i++) {
              if (alufn[3 - i] && ~stack_loaded.q[3 - i] && ~stack_break) {
                if (~stack_loading.q[3 - i]) {
                  ram.address[7:0] = sp.q + 1;
                  ram.address[15:8] = 1;
                  sp.d = sp.q + 1;
                  stack_loading.d[3 - i] = 1;
                  stack_break = 1;
                } else {
                  case (3 - i) {
                    0:
                      //pc.d[7:0] = ram.read_data;
                      oc.d[7:0] = ram.read_data;
                      oc_change.d = 1;
                      oc_changed = oc_change.q | 1;
                    1:
                      //pc.d[15:8] = ram.read_data;
                      oc.d[15:8] = ram.read_data;
                      oc_change.d = 1;
                      oc_changed = oc_change.q | 1;
                    2: flags_store.d = ram.read_data;
                    3:
                     case (asel) {
                        b00: a.d = ram.read_data;
                        b01:
                          ram.address = maddr;
                          ram.write_en = 1;
                          ram.write_data = ram.read_data;
                          stack_break = 1;
                        b10: x.d = ram.read_data;
                        b11: y.d = ram.read_data;
                      }
                  }
                  stack_loaded.d[3 - i] = 1;
                }
              }
            }
          } else {
            for (i = 0; i < 4; i++) {
              if (alufn[i] && ~stack_loaded.q[i] && ~stack_break) {
                ram.address = c{1, sp.q};
                ram.write_en = 1;
                sp.d = sp.q - 1;
                stack_loaded.d[i] = 1;
                stack_break = 1;
                
                case (i) {
                  0: ram.write_data = noc[7:0];
                  1: ram.write_data = noc[15:8];
                  2: ram.write_data = flags_store.q;
                  3: ram.write_data = stack_in;
                }
              }
            }
          }
          
          if (we && ~stack_break) {
            case (wsel) {
              b00:
                if (bsel) {
                  a.d = stack_in;
                } else {
                  sp.d = stack_in;
                }
              b01: 
                // pc.d = stack_in;
                oc.d = stack_in;
                oc_change.d = 1;
                oc_changed = oc_change.q | 1;
              b10: x.d = stack_in;
              b11: y.d = stack_in;
            }
          }
          
          if (stack_loaded.q == alufn && ~stack_break) {
            finish = 1;
          }
        } else {
          case (asel) {
            b00: alu.a = a.q;
            b01: alu.a = mdata[7:0];
            b10: alu.a = x.q;
            b11: alu.a = y.q;
          }
          case (bsel) {
            b0: alu.b = mdata[7:0];
            b1: alu.b = 1;
          }
          alu.in_flags = 6x{~clear_flag} & flags & flags_store.q;
          alu.alufn = alufn;
          flags_store.d = (flags_store.q & ~flags) | (alu.out_flags & flags);
          if (we) {
            case (wsel) {
              b00: a.d = alu.alu;
              b01:
                ram.address = maddr;
                ram.write_en = 1;
                ram.write_data = alu.alu;
              b10: x.d = alu.alu;
              b11: y.d = alu.alu;
            }
          }
          finish = 1;
        }
        
        if (finish) {
          stack_loaded.d = 0;
          stack_loading.d = 0;
          t2.d = 0;
          t1.d = 0;
          register.d = 0;
          if (!oc_changed && !oc_change.q)
            oc.d = noc;
          oc_change.d = 0;
          
          if (set_flag) {
            flags_store.d = (flags_store.q & ~flags) | (flags & 6x{~clear_flag});
          }
          
          if (test_flag && (|(flags_store.q & flags) ^ clear_flag)) {
            if (mdata[7]) {
              pc.d = noc - c{8h0, ~mdata[7:0]} - 1;
              oc.d = noc - c{8h0, ~mdata[7:0]} - 1;
            } else {
              pc.d = noc + mdata;
              oc.d = noc + mdata;
            }
          }
        }
      }
    } else {
      oc.d = noc;
      t1.d = t1.q + 1;
    }
    
    // Display out
    fourdigits.in = ram.fourdigit_out;
    io_sel = ~fourdigits.sel;
    io_seg = ~fourdigits.seg;
    
    led_matrix.x = ram.led_x_out;
    led_matrix.y = ram.led_y_out;
    led_matrix.color = c{ram.led_color_out[2], ram.led_color_out[1], ram.led_color_out[0]};
    led_matrix.we = ram.led_enable_out;
    dout = led_matrix.out;
    
    // DEBUG
    step.in = io_button[2];
    case (io_dip[0]) {
      b00:
        io_led[0] = x.q;
        io_led[1] = a.q;
      b01:
        io_led[0] = buffer[7:0];
        io_led[1] = buffer[15:8];
      b10:
        io_led[0] = mdata;
        io_led[1] = c{data_ready, asel, bsel, wsel, we};
      b11:
        io_led[0] = alufn;
        io_led[1] = alu.alu;
      b100:
        io_led[0] = y.q;
        io_led[1] = c{t1.q, t2.q};
      b101:
        io_led[0] = l;
      b110:
        io_led[0] = c{flags_store.q};
        io_led[1] = c{flags, clear_flag};
      b111:
        io_led[0] = oc.q;
        io_led[1] = pc.q;
      b1000:
        io_led[0] = ram.fourdigit_out;
    }
    case(io_dip[1]) {
      b00: clk2 = clk;
      b01: clk2 = step.out;
      b10: clk2 = fast_clock.value;
      b11: clk2 = slow_clock.value;
    }
    io_led[2] = rdata;
  }
}