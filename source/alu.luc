module alu #(
    BITS = 16: BITS > 0
  )(
    input alufn[6],
    input in_flags[6], // n z c i d v
    input a[BITS],
    input b[BITS],
    output alu[BITS],
    output out_flags[6]
  ) {
  
  sig n, z, v, i, d, c;
  sig out[BITS];
  
  .alufn(alufn[3:0]), #BITS(BITS) {
    .a(a), .b(b) {
      .in_c(in_flags[3]) {
        arith arith; // Arithmetic module
        shifter shifter;  // Handles bit shifts
      }
      boolean boolean; // Boolean module
      
      .in_z(in_flags[4]), .in_v(in_flags[0]), .in_n(in_flags[5]) {
        compare compare; // Compare module
      }
    }
  }
  
  always {
    out = BITSx{0};
    
    n = 0;
    z = 0;
    v = 0;
    i = 0;
    d = 0;
    c = 0;
    
    case (alufn[5:4]) {
      b00:
        out = arith.alu;
        c = arith.out_c;
        v = arith.v;
      b10:
        out = shifter.alu;
        c = shifter.out_c;
      b01: out = boolean.alu;
      b11: out = compare.alu;
    }
    
    n = out[BITS-1];
    z = ~|out;
    
    alu = out;
    out_flags = c{n, z, c, i, d, v};
  }
}